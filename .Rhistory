1-0.11
4*0.11
7*0.11
18*0.11
31*0.11
8*.11
1-0.12
0.88^4
1- (0.88^4)
248.3-244.8
(1-0.98)/2
qt(0.02, df=19)
pf(3.4738, 2, 828)
pf(3.4738, 2, 828, lower.tail=FALSE)
qt(0.02, df=19)
1/5
1-0.24
se_ci <- sqrt((0.24*0.76)/3226)
se_ht <- sqrt((0.20*0.80)/3226)
se_ci
se_ht
p_hep <- 46/625
p_hep
exp_t_hep <- 112 * p_hep
exp_no_t_hep <- 513 * p_hep
exp_t_hep
exp_no_t_hep
exp_no_t_hep + exp_t_hep
0.05*0.93
0.95*0.03
0.0465/(0.0465+0.0285)
3819.99/15079.02
252-9
251/243
1 - (0.2533314 * 1.032922)
sd(c(5,8,12))
which.min(c(4,1,6))
?ellipses
ellipses
simon_says <- function(...){
#   paste("Simon says:", ...)
# }
simon_says
simon_says <- function(...){
paste("Simon says:", ...)
}
simon_says
simon_says(...)
simon_says(pet)
simon_says("pet")
telegram <- function(...){
paste("START",..., "STOP" )
}
telegram("caca de vaca")
mad_libs <- function(...){
# Do your argument unpacking here!
args <- list(...)
place <- args[[1]]
adjective <- args[[2]]
noum <- args[[3]]
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
madlibs("Barcelona avui caca")
mad_libs("Barcelona avui caca")
mad_libs("Barcelona", "avui", "caca")
mad_libs("Barcelona", "avui", "caca", "pallussa")
mad_libs <- function(...){
# Do your argument unpacking here!
args <- list(...)
place <- args[[1]]
adjective <- args[[2]]
noun <- args[[3]]
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
mad_libs("Barcelona", "avui", "caca", "pallussa")
mad_libs("Barcelona", "avui", "caca")
%p%" <- function(left,right){ # Remember to add arguments!
paste(left, right, sep=" ")
}
%p%" <- function(left,right) {
paste(left, right, sep=" ")
}
}
%p%" <- function(left,right) {
paste(left, right, sep=" ")
}
%p%" <- function(left,right) {
paste(left, right)
}
?rpois
set.seed(1)
rpois(5, 2)
library(swirl)
swirl()
sapply(flags, unique)
bye()
choose(6,2)
?margin.table
1030+92/(1030+227+126+92)
t1 <- matrix(c(1030, 227, 126, 92), byrow=TRUE, nrow=2)
t1
accuracy <- sum(diag(t1))/margin.table(t1)
accuracy
magin.table(t1)
margin.table(t1)
remain <- c(spades=11, hearts= 12, diamonds=11, clubs=13)
remain
remain[1]
remain["spades"]
remain_black <- remain[c(1,4)]
remain_black
remain_black <- remain[c(4,1)]
remain_black
remain_black <- remain[c("clubs", "spades")]
remain_black
remain[-1]
remain
remain[-"spades"]
remain[c(FALSE, TRUE, FALSE, TRUE)]
selection_vector <- c(FALSE, TRUE, FALSE, TRUE)
remain[selection_vector]
poker_vector <- c(140, -50, 20, -120, 240)
roulette_vector <- c(-24, -50, 100, -350, 10)
days_vector <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
names(poker_vector) <- days_vector
names(roulette_vector) <- days_vector
roulette_profits <- roulette_vector[roulette_vector > 0]
roulette_profits
sum(roulette_vector >0)
matrix(1:6, nrow=2)
matrix(1:3, ncol=2)
matrix(1:3, row=3, ncol=2)
matrix(1:3, nrow=3, ncol=2)
m <- matrix(1:3, byrow = TRUE, nrow = 2)
m
m <- matrix(1:6, byrow = TRUE, nrow = 2)
m
rbind(m, 7:9)
cbind(m, c(10,11))
m <- matrix(1:6, byrow = TRUE, nrow = 2, dimnames = list(c("row1", "row2"), c("col1", "col2", "col3")))
m
scores <- matrix( , nrow =4, ncol =7, dimnames = list(c("row1", "row2", "row3", "row4"), c("c1", "c2", "c3", "c4", "c5", "total")))
scores <- matrix( , nrow =4, ncol =7, dimnames = list(c("row1", "row2", "row3", "row4"), c("c1", "c2", "c3", "c4", "c5", "c6" "total")))
scores <- matrix( , nrow =4, ncol =7, dimnames = list(c("row1", "row2", "row3", "row4"), c("c1", "c2", "c3", "c4", "c5", "c6", "total")))
scores
m <- matrix(sample(1:15, 12), nrow=3)
m
m[1,3]
m[3 , ]
m[ ,2]
m[4]
m[9]
m[2, c(2,3)]
m[c(1, 2), c(3,4)]
rownames(m) <- c("r1", "r2", "r3")
colnames(m) <- c("a", "b", "c", "d")
m
m[2, 3]
m["r2", "c"]
m[2, "c"]
m[3, c("c", "d")]
m[c(FALSE, FALSE, TRUE, FALSE, FALSE, TRUE, TRUE)]
m[c(FALSE, FALSE, TRUE), c(FALSE, FALSE, TRUE, TRUE)]
matrix(6:16, nrow=5)
m6 <- matrix(6:16, nrow=5)
m6 <- matrix(6:15, nrow=5)
m1 <- matrix(1:9, nrow=5)
m1 <- matrix(1:10, nrow=5)
m1
m6
m6 - m1
m7 <- matrix(7:16, nrow=5)
m7 - m1
s <- m7 - m6
s
fly_class <- c("eco" "bus" "eco" "bus" "fir" "eco" "eco" "bus" "eco" "eco" "fir" "eco")
fly_class <- c("eco", "bus", "eco", "bus", "fir", "eco", "eco", "bus", "eco", "eco", "fir", "eco")
fly_class_factor <- factor(fly_class)
fly_class_factor
levels(fly_class) <- c("eco", "bus", "fir")
levels(fly_class_factor) <- c("eco", "bus", "fir")
fly_class_factor
labels(fly_class_factor) <- c("economy", "business", "first")
fly_class_factor <- factor(fly_class_factor, labels = c("economy", "business", "first"))
fly_class_factor
fly_class_factor <- factor(fly_class_factor, ordered = TRUE)
fly_class_factor
countries <- c("Canada"     ,    "United States" , "France" )
?stringsAsFactors
continents <- c(North-America, North-America, Europe)
continents <- c("North-America", "North-America", "Europe")
gdp <- c(44843, 54596, 44538 )
hdi <-  c(0.902 ,0.914, 0.884)
president <- c(FALSE, TRUE, TRUE)
continents <- factor(continents)
countries_df <- data.frame(name = countries, cont = continents, GDP = gdp, HDI = hdi, has_president = president, stringsAsFactors = FALSE)
str(countries_df)
rings_vector <- c(FALSE ,FALSE ,FALSE, FALSE  ,TRUE  ,TRUE  ,TRUE , TRUE)
rings_vector[TRUE]
install_from_swirl("R Programming")
install.packages("swirl")
library(swirl)
swirl()
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
skip()
skip()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function()
boring_function
my_mean <- function(my_vector) {
# Write your code here!
x <- sum(my_vector)
y <- length(my_vector)
x/y
# Remember: the last expression evaluated will be returned!
}
my_mean(c(3,4,5))
my_mean(c(4,4,4))
my_mean(c(0,4,8))
my_mean(c(4,4,8))
submit()
my_mean(c(4,5,10))
7 %% 3
7 %% 4
submit()
submit()
reminder(5)
reminder(5)
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div =2)
args(remainder)
floor(11.1)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[3]}, c(8,4,0))
evaluate(function(x){x[length(x)}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
telegram <- function(...){
paste0("START", ..., "STOP")
}
telegram(prova)
simon_says <- function(...){
paste("Simon says:", ...)}
simon_says("hola")
telegram("hola")
submit()
telegram("hola", "pallussa")
telegram("hola", "pallussa")
telegram <- function(...){
paste("START", ..., "STOP")
}
telegram("hola", "pallussa")
submit()
telegram("hola", "pallussa")
mad_libs <- function(...){
# Do your argument unpacking here!
args <- list(...)
place <- args[[1]]
adjective <- args[[2]]
noum <- args[[3]]
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
mad_libs("Roma dolentes revolta")
mad_libs("Roma", "dolentes", "revolta")
mad_libs <- function(...){
# Do your argument unpacking here!
args <- list(...)
place <- args[[1]]
adjective <- args[[2]]
noun <- args[[3]]
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
mad_libs("Roma", "dolentes", "revolta")
submit()
mad_libs("Roma", "dolentes", "revolta")
"%p%" <- function(left, right){ # Remember to add arguments!
paste(left, right)
}
"Good" %p% "job!"
submit()
"I" "love" %p% "R!"
"I" %p% "love" %p% "R!"
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
x
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
f(2)
f(3)
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
lm(rm=ls())
rm(list=ls())
swirl()
library(swirl)
swirl()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
play()
weekdays(t1)
nxt()
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = "days")
fun1 <- function(x){
res = NULL
n = nrow(x)
for(i in 1:n) if (!any(is.na(x[i, ])))
res = rbind(res, x[i, ])
res
}
func2 <- function(x){
n = nrow(x)
res = matrix(0, n, ncol(x))
k=1
for(i in 1:n)
if(!any(is.na(x[i, ]))){
res[k, ] <- x[i, ]
k = k+1
}
res[1:(k-1), ]
}
fun3 <- function(x){
omit = F
n = ncol(x)
for(i in 1:n)
omit = omit | is.na(x[ ,i])
x[!omit, ]
}
x <- matrix(rnorm(20000000), 1000000, 20)
x[x > 1.5] = NA
head(x)
Rprof("method1.out")
print(unic.time(fun1(x)))
Rprof(NULL)
Rprof("method2.out")
print(unic.time(fun2(x)))
Rprof(NULL)
Rprof("method3.out")
print(unic.time(fun3(x)))
Rprof(NULL)
Rprof("method1.out")
print(unix.time(fun1(x)))
library(datasets)
data(iris)
?iris
head(iris)
tapply(iris, Species, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris[, 1:4], 2, mean)
data(mtcars)
?mtcars
head(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
library(datasets)
?mtcars
table(mtcas$cyl)
table(mtcars$cyl)
tapply(mtcars$hp, mtcars$cyl, mean)
abs(122.28571-209.21429)
abs(209.21429-122.28571)
hp_x_C <- tapply(mtcars$hp, mtcars$cyl, mean)
hp_x_C
hp_x_C[6] - hp_x_C[8]
hp_x_C["6"] - hp_x_C["8"]
abs(hp_x_C["6"] - hp_x_C["8"])
abs(hp_x_C["4"] - hp_x_C["8"])
old.dir <- getwd()
print(old.dir)
setwd("C:/Users/Dra. Pols/Desktop/Coursera/Data specialisation/Week 3")
old.dir <- getwd()
setwd("C:/Users/Dra. Pols/Usuarios/datasciencecoursera")
setwd("C:/Users/Dra. Pols/datasciencecoursera")
getwd()
list.files()
setwd(old.dir)
getwd()
setwd("C:/Users/Dra. Pols/datasciencecoursera")
list.files()
setwd("C:/Users/Dra. Pols/datasciencecoursera/ProgrammingAssignment2")
list.files()
funcio_1 <- function(x) x + 3 (10)
funcio_1
(function(x) x + 3 (10))
(function(x) x + 3) (10)
funcio_1<- function(x) x + 3 (10)
funcio_1
(function(x) x + 3) (10)
formuals((function(x) x + 3) (10))
formals((function(x) x + 3) (10))
body((function(x) x + 3) (10))
(function(x) x + 3) ()
(function(x) 3)
(function(x) 3) ()
formals(function(x) 3))
formals(function(x) 3)
formals(function(x) 3)
body(function(x) 3)
formals(function(x) x + 3) (10)
(function(x) 3) ()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
var <- makeVector(1, 2, 3, 4)
var <- makeVector(c(1, 2, 3, 4))
as.list(var)
datavalue <- var$get()
datavalue
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
var$get()
var$set()
var$set(c(2, 2, 2, 2))
var$get()
var$getmean()
cachemean(var)
cachemean(var)
matriu1 <- matrix(1:10, 2, 5)
matriu1
solve(matriu1)
matriu1 <- matrix(1:9, 3, 3)
matriu1
solve(matriu1)
